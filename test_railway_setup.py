#!/usr/bin/env python3
"""
Script de prueba para verificar la configuraci√≥n de Railway
"""

import os
import sys
import subprocess
import time

def test_local_setup():
    """Probar la configuraci√≥n local"""
    print("üîç Probando configuraci√≥n local...")
    
    # Verificar que los archivos necesarios existen
    required_files = [
        "Dockerfile",
        "railway.toml",
        "deploy-railway.sh",
        "backend/scripts/check_db_health.py",
        "backend/scripts/diagnose_railway.py"
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Archivos faltantes: {missing_files}")
        return False
    
    print("‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def test_railway_cli():
    """Probar Railway CLI"""
    print("\nüîç Probando Railway CLI...")
    
    try:
        # Verificar si Railway CLI est√° instalado
        result = subprocess.run(["railway", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Railway CLI instalado: {result.stdout.strip()}")
        else:
            print("‚ùå Railway CLI no est√° instalado correctamente")
            return False
        
        # Verificar autenticaci√≥n
        result = subprocess.run(["railway", "whoami"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Autenticado como: {result.stdout.strip()}")
        else:
            print("‚ö†Ô∏è No autenticado con Railway (esto es normal si no has hecho login)")
        
        return True
        
    except FileNotFoundError:
        print("‚ùå Railway CLI no est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Error probando Railway CLI: {e}")
        return False

def test_docker_setup():
    """Probar configuraci√≥n de Docker"""
    print("\nüîç Probando configuraci√≥n de Docker...")
    
    try:
        # Verificar Docker
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker instalado: {result.stdout.strip()}")
        else:
            print("‚ùå Docker no est√° instalado")
            return False
        
        # Verificar Docker Compose
        result = subprocess.run(["docker-compose", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker Compose instalado: {result.stdout.strip()}")
        else:
            print("‚ùå Docker Compose no est√° instalado")
            return False
        
        return True
        
    except FileNotFoundError:
        print("‚ùå Docker no est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Error probando Docker: {e}")
        return False

def test_backend_scripts():
    """Probar scripts del backend"""
    print("\nüîç Probando scripts del backend...")
    
    try:
        # Cambiar al directorio del backend
        backend_dir = "backend"
        if not os.path.exists(backend_dir):
            print("‚ùå Directorio backend no encontrado")
            return False
        
        # Probar script de verificaci√≥n de salud
        script_path = os.path.join(backend_dir, "scripts", "check_db_health.py")
        if os.path.exists(script_path):
            print("‚úÖ Script de verificaci√≥n de salud encontrado")
        else:
            print("‚ùå Script de verificaci√≥n de salud no encontrado")
            return False
        
        # Probar script de diagn√≥stico
        script_path = os.path.join(backend_dir, "scripts", "diagnose_railway.py")
        if os.path.exists(script_path):
            print("‚úÖ Script de diagn√≥stico encontrado")
        else:
            print("‚ùå Script de diagn√≥stico no encontrado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando scripts del backend: {e}")
        return False

def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ Prueba de configuraci√≥n de Railway para Task Tracker")
    print("=" * 60)
    
    tests = [
        ("Configuraci√≥n local", test_local_setup),
        ("Railway CLI", test_railway_cli),
        ("Docker", test_docker_setup),
        ("Scripts del backend", test_backend_scripts)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Error en {name}: {e}")
            results.append((name, False))
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    all_ok = True
    for name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{name}: {status}")
        if not result:
            all_ok = False
    
    print("=" * 60)
    if all_ok:
        print("üéâ Todas las pruebas pasaron! Tu configuraci√≥n est√° lista para Railway.")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Ejecuta: railway login")
        print("2. Ejecuta: ./deploy-railway.sh")
        print("3. Espera a que el despliegue se complete")
        print("4. Visita tu aplicaci√≥n en Railway")
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores arriba.")
        print("\nüîß Soluciones comunes:")
        print("- Instala Railway CLI: npm install -g @railway/cli")
        print("- Instala Docker: https://docs.docker.com/get-docker/")
        print("- Haz login en Railway: railway login")
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
